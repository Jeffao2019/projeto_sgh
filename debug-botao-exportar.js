// Debug espec√≠fico para investigar o problema do bot√£o exportar
const axios = require('axios');

const API_BASE = 'http://localhost:3000';

async function investigarBotaoExportar() {
  console.log('üîç INVESTIGA√á√ÉO: Por que o bot√£o exportar n√£o funciona?');
  console.log('=' .repeat(60));

  try {
    // 1. Testar autentica√ß√£o
    console.log('\n1Ô∏è‚É£ Testando autentica√ß√£o...');
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, {
      email: 'dr.teste.agendamento@teste.com',
      password: '123456'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ Login OK - Token obtido');

    // 2. Buscar prontu√°rios
    console.log('\n2Ô∏è‚É£ Buscando prontu√°rios...');
    const prontuariosResponse = await axios.get(`${API_BASE}/prontuarios/with-relations`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    const prontuarios = prontuariosResponse.data;
    console.log(`‚úÖ ${prontuarios.length} prontu√°rios encontrados`);

    // 3. Analisar primeiro prontu√°rio
    const prontuario = prontuarios[0];
    console.log('\n3Ô∏è‚É£ Analisando primeiro prontu√°rio:');
    console.log('üÜî ID:', prontuario.id);
    console.log('üë§ Paciente:', {
      nome: prontuario.paciente?.nome,
      cpf: prontuario.paciente?.cpf,
      email: prontuario.paciente?.email
    });
    console.log('üë®‚Äç‚öïÔ∏è M√©dico:', prontuario.medico?.nome);
    console.log('üìÖ Data:', prontuario.dataConsulta);

    // 4. Testar endpoint individual
    console.log('\n4Ô∏è‚É£ Testando endpoint individual...');
    const prontuarioIndividual = await axios.get(`${API_BASE}/prontuarios/${prontuario.id}/with-relations`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    console.log('‚úÖ Endpoint individual funcionando');
    console.log('üìã Dados individuais completos:', {
      temPaciente: !!prontuarioIndividual.data.paciente,
      temMedico: !!prontuarioIndividual.data.medico,
      temDiagnostico: !!prontuarioIndividual.data.diagnostico
    });

    console.log('\n5Ô∏è‚É£ AN√ÅLISE DO PROBLEMA:');
    console.log('üîß Backend: ‚úÖ Funcionando perfeitamente');
    console.log('üîß Dados: ‚úÖ Completos e dispon√≠veis');
    console.log('üîß API: ‚úÖ Respondendo corretamente');
    
    console.log('\nüéØ POSS√çVEIS CAUSAS DO PROBLEMA:');
    console.log('1. üåê Frontend: Erro no navegador/console');
    console.log('2. üì¶ jsPDF: Biblioteca n√£o carregando');
    console.log('3. üñ±Ô∏è Click: Bot√£o n√£o est√° respondendo');
    console.log('4. üîó Import: Problema nas importa√ß√µes');

    console.log('\nüìù PR√ìXIMOS PASSOS DE DEBUG:');
    console.log('1. Abrir http://localhost:8081');
    console.log('2. Fazer login');
    console.log('3. Ir para Prontu√°rios');
    console.log('4. Abrir DevTools (F12) ‚Üí Console');
    console.log('5. Clicar no bot√£o PDF/LGPD');
    console.log('6. Procurar por mensagens que come√ßam com [TESTE]');

    console.log('\nüîé MENSAGENS ESPERADAS NO CONSOLE:');
    console.log('[TESTE] Clicou no bot√£o PDF');
    console.log('[TESTE] Dados do prontu√°rio: {...}');
    console.log('[TESTE] Importando jsPDF...');
    console.log('[TESTE] jsPDF importado!');
    console.log('[TESTE] PDF gerado e salvo com sucesso!');

    console.log('\n‚ùå SE N√ÉO APARECER NENHUMA MENSAGEM:');
    console.log('‚Üí O bot√£o n√£o est√° sendo clicado');
    console.log('‚Üí Problema no evento onClick');

    console.log('\n‚ùå SE APARECER ERRO:');
    console.log('‚Üí Copie a mensagem de erro completa');
    console.log('‚Üí Informe qual bot√£o foi clicado (PDF ou LGPD)');

  } catch (error) {
    console.error('‚ùå Erro na investiga√ß√£o:', error.message);
    if (error.response) {
      console.error('üìù Detalhes:', error.response.data);
    }
  }
}

investigarBotaoExportar();

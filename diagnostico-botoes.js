/**
 * TESTE DIRETO DOS BOT√ïES DE EXPORTA√á√ÉO
 * Execute este script no console do navegador para diagnosticar o problema
 */

console.log("üîç INICIANDO DIAGN√ìSTICO DOS BOT√ïES...");

// 1. Verificar se os bot√µes existem na p√°gina
console.log("\n1Ô∏è‚É£ Verificando se os bot√µes existem...");
const botoesPDF = document.querySelectorAll('[data-testid*="export"], button[title*="PDF"], button[aria-label*="PDF"]');
const botoesComDownload = document.querySelectorAll('button:has(svg), button[class*="export"]');
const todosBotoes = document.querySelectorAll('button');

console.log(`üìä Bot√µes encontrados:`);
console.log(`   - Bot√µes com PDF/export: ${botoesPDF.length}`);
console.log(`   - Bot√µes com √≠cones: ${botoesComDownload.length}`);
console.log(`   - Total de bot√µes: ${todosBotoes.length}`);

// 2. Listar todos os bot√µes para identifica√ß√£o
console.log("\n2Ô∏è‚É£ Listando bot√µes na p√°gina...");
todosBotoes.forEach((botao, index) => {
  const texto = botao.textContent?.trim() || botao.title || botao.ariaLabel || 'Sem texto';
  const classes = botao.className || 'Sem classes';
  const onClick = botao.onclick ? 'TEM onClick' : 'SEM onClick';
  const listeners = getEventListeners ? getEventListeners(botao) : 'N/A';
  
  console.log(`   Bot√£o ${index + 1}: "${texto}" | Classes: ${classes} | ${onClick}`);
  
  // Se parece com bot√£o de export, destaque
  if (texto.toLowerCase().includes('export') || 
      texto.toLowerCase().includes('pdf') || 
      classes.toLowerCase().includes('export')) {
    console.log(`   ‚≠ê POSS√çVEL BOT√ÉO DE EXPORT: ${texto}`);
    
    // Tentar clicar no bot√£o
    console.log(`   üß™ Testando clique...`);
    try {
      botao.click();
      console.log(`   ‚úÖ Clique executado!`);
    } catch (error) {
      console.log(`   ‚ùå Erro no clique: ${error.message}`);
    }
  }
});

// 3. Verificar se React est√° carregado
console.log("\n3Ô∏è‚É£ Verificando React...");
if (window.React) {
  console.log("‚úÖ React detectado!");
} else {
  console.log("‚ùå React n√£o detectado");
}

// 4. Verificar se jsPDF est√° dispon√≠vel
console.log("\n4Ô∏è‚É£ Verificando jsPDF...");
try {
  import('jspdf').then(() => {
    console.log("‚úÖ jsPDF pode ser importado!");
  }).catch(error => {
    console.log("‚ùå Erro ao importar jsPDF:", error);
  });
} catch (error) {
  console.log("‚ùå Erro ao testar import jsPDF:", error);
}

// 5. Verificar erros no console
console.log("\n5Ô∏è‚É£ Verificando erros...");
console.log("üîç Abra a aba 'Console' e procure por erros em vermelho");
console.log("üîç Clique em um bot√£o de export e veja se aparece alguma mensagem");

// 6. Criar fun√ß√£o de teste manual
console.log("\n6Ô∏è‚É£ Criando fun√ß√£o de teste manual...");
window.testarBotaoExport = () => {
  console.log("üß™ TESTE MANUAL INICIADO!");
  alert("üß™ Fun√ß√£o de teste manual est√° funcionando!");
  
  try {
    import('jspdf').then(jsPDF => {
      console.log("‚úÖ jsPDF importado com sucesso!");
      const doc = new jsPDF.default();
      doc.text('Teste', 20, 20);
      doc.save('teste.pdf');
      alert("‚úÖ PDF de teste gerado!");
    });
  } catch (error) {
    console.log("‚ùå Erro no teste:", error);
    alert(`‚ùå Erro: ${error.message}`);
  }
};

console.log("\nüéØ INSTRU√á√ïES:");
console.log("1. Execute: testarBotaoExport() no console");
console.log("2. Clique nos bot√µes de export na interface");
console.log("3. Veja se aparecem mensagens de [TESTE] no console");
console.log("4. Reporte os resultados!");

console.log("\n‚úÖ DIAGN√ìSTICO COMPLETO! Verifique os resultados acima.");

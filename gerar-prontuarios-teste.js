const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

const API_BASE_URL = 'http://localhost:3000';

// Dados realistas para prontu√°rios m√©dicos
const anamneseExemplos = [
    'Paciente relata dor de cabe√ßa persistente h√° 3 dias, de intensidade moderada, sem fatores de melhora ou piora espec√≠ficos. Nega febre, n√°useas ou altera√ß√µes visuais.',
    'Refere febre baixa (37.5¬∞C) h√° 2 dias, acompanhada de mal-estar geral, cefaleia e mialgia. Iniciou uso de paracetamol com melhora parcial dos sintomas.',
    'Queixa-se de dor epig√°strica em queima√ß√£o, principalmente ap√≥s refei√ß√µes, h√° 1 semana. Nega v√¥mitos, diarreia ou altera√ß√µes significativas do apetite.',
    'Apresenta tosse seca persistente h√° 5 dias, inicialmente noturna, agora durante todo o dia. Refere leve falta de ar aos esfor√ßos e nega febre.',
    'Dor lombar baixa h√° 1 semana, com irradia√ß√£o para membro inferior direito. Piora com movimentos e melhora parcialmente com repouso.',
    'Paciente assintom√°tico, comparece para consulta de rotina e check-up geral. Nega queixas espec√≠ficas no momento.',
    'Dor precordial tipo pontada h√° 2 dias, principalmente ao respirar fundo. Nega dispneia de repouso, palpita√ß√µes ou s√≠ncope.',
    'Epis√≥dios de tontura rotat√≥ria h√° 3 dias, principalmente ao levantar da cama. Acompanhado de n√°useas leves, sem v√¥mitos.',
    'Ins√¥nia h√° 2 semanas, com dificuldade para iniciar o sono. Refere preocupa√ß√µes relacionadas ao trabalho e ansiedade.',
    'Dor e rigidez nos joelhos bilateralmente, principalmente pela manh√£. Melhora com movimenta√ß√£o e atividade f√≠sica leve.',
    'Coriza, espirros e obstru√ß√£o nasal h√° 2 dias. Refere contato pr√≥ximo com familiar resfriado.',
    'Paciente hipertenso conhecindo, em acompanhamento. √öltima medi√ß√£o domiciliar: 150x95 mmHg. Nega sintomas relacionados.',
    'Diab√©tico tipo 2, refere polidipsia e poli√∫ria nas √∫ltimas semanas. Glicemia capilar atual: 190 mg/dL.',
    'Dor muscular intensa em membros inferiores ap√≥s exerc√≠cio f√≠sico intenso realizado ontem. Refere c√¢imbras noturnas.',
    'Espirros frequentes, coriza e prurido ocular h√° 1 semana. Piora em ambientes empoeirados.'
];

const examesFisicos = [
    'Paciente em bom estado geral, corado, hidratado, anict√©rico. PA: 120x80 mmHg, FC: 72 bpm, FR: 16 irpm, Tax: 36.5¬∞C. Ausculta cardiopulmonar normal.',
    'REG, corado, hidratado. Sinais vitais: PA 110x70, FC 80, Tax 37.2¬∞C. Orofaringe hiperemiada. Linfonodos cervicais palp√°veis.',
    'BEG, corado, hidratado. PA: 130x85, FC: 68. Abdome doloroso √† palpa√ß√£o em epig√°strio, sem sinais de irrita√ß√£o peritoneal.',
    'REG, discretamente dispneico. PA: 125x80, FC: 88, FR: 22. Ausculta pulmonar com roncos difusos bilateralmente.',
    'BEG, em posi√ß√£o ant√°lgica. Exame da coluna lombar com limita√ß√£o da flex√£o. Sinal de Las√®gue positivo √† direita.',
    'Excelente estado geral, corado, hidratado. Sinais vitais normais. Exame f√≠sico geral sem altera√ß√µes significativas.',
    'BEG, corado, hidratado. PA: 115x75, FC: 70. Ausculta card√≠aca com bulhas normofon√©ticas. Dor √† palpa√ß√£o do gradil costal.',
    'REG, corado, hidratado. PA: 100x60, FC: 60. Exame neurol√≥gico com nistagmo horizontal. Romberg positivo.',
    'BEG, ansioso, corado, hidratado. Sinais vitais normais. Exame f√≠sico sem altera√ß√µes. Paciente refere tens√£o muscular.',
    'BEG, corado. Exame dos joelhos com discreto edema e crepita√ß√£o √† mobiliza√ß√£o. Amplitude de movimento preservada.',
    'REG, corado, hidratado. Rinoscopia com mucosa hiperemiada e secre√ß√£o serosa. Orofaringe normal.',
    'BEG, corado, hidratado. PA: 150x95 mmHg confirmada ap√≥s repouso. Ausculta card√≠aca normal. Fundo de olho a esclarecer.',
    'REG, corado, hidratado, obeso (IMC 31). Glicemia capilar: 190 mg/dL. Exame dos p√©s sem les√µes.',
    'BEG, corado. Exame dos membros inferiores com dor √† palpa√ß√£o da musculatura posterior. For√ßa muscular preservada.',
    'REG, corado. Conjuntivas hiperemiadas. Rinoscopia com mucosa edemaciada. Ausculta pulmonar com sibilos esparsos.'
];

const diagnosticos = [
    'Cefaleia tensional',
    'S√≠ndrome gripal',
    'Dispepsia funcional',
    'Bronquite aguda',
    'Lombalgia mec√¢nica',
    'Paciente h√≠gido - exame normal',
    'Dor tor√°cica at√≠pica',
    'Vertigem posicional parox√≠stica benigna',
    'Ins√¥nia prim√°ria com ansiedade',
    'Artrose de joelhos',
    'Rinofaringite viral',
    'Hipertens√£o arterial sist√™mica',
    'Diabetes mellitus tipo 2 descompensado',
    'Mialgia p√≥s-exerc√≠cio',
    'Rinite al√©rgica'
];

const prescricoes = [
    'Paracetamol 750mg, 1 cp de 8/8h por 5 dias se dor. Orienta√ß√µes sobre higiene do sono e controle do estresse.',
    'Paracetamol 750mg se febre. Hidrata√ß√£o oral abundante. Repouso domiciliar. Retorno se piora.',
    'Omeprazol 20mg, 1 cp em jejum por 14 dias. Orienta√ß√µes diet√©ticas: evitar frituras e condimentos.',
    'Salbutamol spray: 2 jatos se falta de ar. Expectorante xarope. Hidrata√ß√£o. Evitar irritantes.',
    'Ibuprofeno 600mg de 8/8h por 7 dias com alimento. Repouso relativo. Encaminhamento para fisioterapia.',
    'Manter h√°bitos saud√°veis. Retorno em 6 meses. Exames laboratoriais de rotina solicitados.',
    'Orienta√ß√£o para repouso. Retorno em 48h se persist√™ncia dos sintomas. Evitar esfor√ßos f√≠sicos.',
    'Orienta√ß√µes sobre manobras de reposicionamento. Betaistina 24mg de 12/12h por 7 dias.',
    'Orienta√ß√µes sobre higiene do sono. Melatonina 3mg ao deitar. T√©cnicas de relaxamento.',
    'Anti-inflamat√≥rio t√≥pico. Glucosamina 1,5g/dia. Exerc√≠cios de fortalecimento orientados.',
    'Sintom√°ticos. Lavagem nasal com soro fisiol√≥gico. Repouso. Isolamento enquanto sintom√°tico.',
    'Ajuste da medica√ß√£o: Losartana 50mg/dia. Orienta√ß√µes diet√©ticas. Retorno em 15 dias.',
    'Orienta√ß√µes sobre dieta hipoglic√≠dica. Ajuste da metformina para 850mg 12/12h. Retorno em 30 dias.',
    'Repouso, aplica√ß√£o de gelo local. Alongamentos leves. Anti-inflamat√≥rio se necess√°rio.',
    'Loratadina 10mg/dia. Spray nasal com corticoide. Evitar al√©rgenos. Retorno em 4 semanas.'
];

function gerarDataConsulta() {
    // Gera datas futuras entre hoje e 30 dias no futuro
    const hoje = new Date();
    const trintaDiasNoFuturo = new Date(hoje.getTime() + (30 * 24 * 60 * 60 * 1000));
    const timestamp = hoje.getTime() + Math.random() * (trintaDiasNoFuturo.getTime() - hoje.getTime());
    return new Date(timestamp);
}

function gerarAgendamento(pacienteId, medicoId) {
    const dataHora = gerarDataConsulta();
    
    return {
        pacienteId: pacienteId,
        medicoId: medicoId,
        dataHora: dataHora.toISOString(),
        tipo: 'CONSULTA_GERAL',
        observacoes: 'Consulta de rotina - agendamento autom√°tico para teste'
    };
}

function gerarProntuario(pacienteId, medicoId, agendamentoId, dataConsulta) {
    const index = Math.floor(Math.random() * anamneseExemplos.length);
    
    return {
        pacienteId: pacienteId,
        medicoId: medicoId,
        agendamentoId: agendamentoId,
        dataConsulta: dataConsulta,
        anamnese: anamneseExemplos[index],
        exameFisico: examesFisicos[index],
        diagnostico: diagnosticos[index],
        prescricao: prescricoes[index],
        observacoes: 'Paciente orientado sobre o tratamento e sinais de alerta. Retorno conforme agendado.'
    };
}

async function criarProntuariosTeste() {
    console.log('=== GERA√á√ÉO DE AGENDAMENTOS E PRONTU√ÅRIOS DE TESTE ===\n');

    try {
        // 1. Login para obter token
        console.log('1. Fazendo login...');
        const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
            email: 'dr.teste.agendamento@teste.com',
            password: '123456'
        });
        
        if (!loginResponse.data.token) {
            console.log('‚ùå Login falhou');
            return;
        }
        
        const token = loginResponse.data.token;
        const headers = { 
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json'
        };
        console.log('‚úÖ Login realizado com sucesso');

        // 2. Buscar todos os pacientes
        console.log('\n2. Buscando lista de pacientes...');
        const pacientesResponse = await axios.get(`${API_BASE_URL}/pacientes`, { headers });
        const pacientes = pacientesResponse.data;
        console.log(`‚úÖ Encontrados ${pacientes.length} pacientes`);

        // 3. Buscar m√©dico (usu√°rio logado)
        const medicoId = '8d39054c-87e9-458b-a44a-9fc4b266776c'; // ID do Dr. Teste Agendamento

        // 4. Criar agendamentos e prontu√°rios para cada paciente
        console.log('\n3. Gerando agendamentos e prontu√°rios...\n');
        
        let totalAgendamentos = 0;
        let totalProntuarios = 0;
        let sucessosAgendamentos = 0;
        let sucessosProntuarios = 0;
        let erros = 0;

        for (const paciente of pacientes) {
            const numConsultas = Math.floor(Math.random() * 3) + 1; // 1 a 3 consultas
            console.log(`üìù Gerando ${numConsultas} consulta(s) para ${paciente.nome}...`);
            
            for (let i = 0; i < numConsultas; i++) {
                try {
                    // Criar agendamento primeiro
                    const agendamento = gerarAgendamento(paciente.id, medicoId);
                    totalAgendamentos++;
                    
                    const agendamentoResponse = await axios.post(`${API_BASE_URL}/agendamentos`, agendamento, { headers });
                    console.log(`   ‚úÖ Agendamento ${i + 1} criado - ID: ${agendamentoResponse.data.id}`);
                    sucessosAgendamentos++;
                    
                    // Criar prontu√°rio vinculado ao agendamento
                    const prontuario = gerarProntuario(
                        paciente.id, 
                        medicoId, 
                        agendamentoResponse.data.id,
                        agendamento.dataHora
                    );
                    totalProntuarios++;
                    
                    const prontuarioResponse = await axios.post(`${API_BASE_URL}/prontuarios`, prontuario, { headers });
                    console.log(`   ‚úÖ Prontu√°rio ${i + 1} criado - ID: ${prontuarioResponse.data.id}`);
                    sucessosProntuarios++;
                    
                    // Pausa pequena entre cria√ß√µes
                    await new Promise(resolve => setTimeout(resolve, 200));
                    
                } catch (error) {
                    console.log(`   ‚ùå Erro na consulta ${i + 1}: ${error.response?.data?.message || error.message}`);
                    erros++;
                }
            }
        }

        console.log(`\n=== RESULTADOS ===`);
        console.log(`‚úÖ Agendamentos criados: ${sucessosAgendamentos}/${totalAgendamentos}`);
        console.log(`‚úÖ Prontu√°rios criados: ${sucessosProntuarios}/${totalProntuarios}`);
        console.log(`‚ùå Erros total: ${erros}`);

        // 5. Verificar totais no sistema
        console.log(`\n4. Verificando totais no sistema...`);
        
        const agendamentosResponse = await axios.get(`${API_BASE_URL}/agendamentos`, { headers });
        console.log(`üìã Total de agendamentos: ${agendamentosResponse.data.length}`);
        
        const prontuariosResponse = await axios.get(`${API_BASE_URL}/prontuarios/with-relations`, { headers });
        console.log(`üìã Total de prontu√°rios: ${prontuariosResponse.data.length}`);

        // 6. Mostrar estat√≠sticas por paciente
        if (prontuariosResponse.data.length > 0) {
            console.log(`\nüìä Prontu√°rios por paciente:`);
            const estatisticas = {};
            
            prontuariosResponse.data.forEach(p => {
                const nome = p.paciente.nome;
                if (!estatisticas[nome]) {
                    estatisticas[nome] = 0;
                }
                estatisticas[nome]++;
            });
            
            Object.entries(estatisticas)
                .sort(([,a], [,b]) => b - a)
                .forEach(([nome, quantidade]) => {
                    console.log(`   ${nome}: ${quantidade} prontu√°rio(s)`);
                });
        }

        console.log(`\nüéâ Gera√ß√£o conclu√≠da!`);
        console.log(`üì± Sistema completo para testes:`);
        console.log(`   ‚Ä¢ ${pacientes.length} pacientes`);
        console.log(`   ‚Ä¢ ${agendamentosResponse.data.length} agendamentos`);
        console.log(`   ‚Ä¢ ${prontuariosResponse.data.length} prontu√°rios`);
        console.log(`üîç Acesse: http://localhost:8081/pacientes para come√ßar os testes.`);

    } catch (error) {
        console.error('‚ùå Erro durante a gera√ß√£o:', error.message);
        if (error.response) {
            console.error('   Status:', error.response.status);
            console.error('   Dados:', error.response.data);
        }
    }
}

// Executar gera√ß√£o
criarProntuariosTeste();

// Script para testar navega√ß√£o at√© prontu√°rios e testagem dos bot√µes
const puppeteer = require('puppeteer');

async function testarBotoesExportacao() {
  console.log('ü§ñ Iniciando teste automatizado dos bot√µes de exporta√ß√£o...\n');
  
  const browser = await puppeteer.launch({ 
    headless: false, // Para ver o que est√° acontecendo
    slowMo: 100 // Movimento mais lento para visualizar
  });
  
  const page = await browser.newPage();
  
  try {
    // 1. Acessar a aplica√ß√£o
    console.log('1Ô∏è‚É£ Acessando aplica√ß√£o...');
    await page.goto('http://localhost:8081');
    await page.waitForTimeout(2000);
    
    // 2. Verificar se a p√°gina carregou
    console.log('2Ô∏è‚É£ Verificando carregamento da p√°gina...');
    const title = await page.title();
    console.log('üìÑ T√≠tulo da p√°gina:', title);
    
    // 3. Fazer login
    console.log('3Ô∏è‚É£ Realizando login...');
    
    // Esperar pelos campos de login
    await page.waitForSelector('input[type="email"]', { timeout: 10000 });
    await page.waitForSelector('input[type="password"]');
    
    // Preencher credenciais
    await page.type('input[type="email"]', 'dr.teste.agendamento@teste.com');
    await page.type('input[type="password"]', '123456');
    
    // Clicar no bot√£o de login
    await page.click('button[type="submit"]');
    console.log('‚úÖ Credenciais inseridas, aguardando redirecionamento...');
    
    // Aguardar redirecionamento ap√≥s login
    await page.waitForTimeout(3000);
    
    // 4. Navegar para prontu√°rios
    console.log('4Ô∏è‚É£ Navegando para lista de prontu√°rios...');
    
    // Procurar link ou bot√£o para prontu√°rios
    const prontuariosLink = await page.$('a[href="/prontuarios"]') || 
                           await page.$('a[href*="prontuarios"]') ||
                           await page.$x('//a[contains(text(), "Prontu√°rios")]');
    
    if (prontuariosLink) {
      if (Array.isArray(prontuariosLink)) {
        await prontuariosLink[0].click();
      } else {
        await prontuariosLink.click();
      }
      console.log('‚úÖ Clicou no link de prontu√°rios');
    } else {
      console.log('üîÑ Tentando navegar diretamente...');
      await page.goto('http://localhost:8081/prontuarios');
    }
    
    await page.waitForTimeout(3000);
    
    // 5. Verificar se chegou na p√°gina de prontu√°rios
    console.log('5Ô∏è‚É£ Verificando p√°gina de prontu√°rios...');
    const currentUrl = page.url();
    console.log('üåê URL atual:', currentUrl);
    
    // 6. Procurar bot√µes de exporta√ß√£o
    console.log('6Ô∏è‚É£ Procurando bot√µes de exporta√ß√£o...');
    
    // Aguardar carregamento dos prontu√°rios
    await page.waitForTimeout(2000);
    
    // Procurar bot√µes PDF
    const botoesPDF = await page.$$('button:has-text("PDF")') || 
                     await page.$$('button[title*="PDF"]') ||
                     await page.$$('*[title*="PDF"]');
                     
    // Procurar bot√µes LGPD
    const botoesLGPD = await page.$$('button:has-text("LGPD")') || 
                      await page.$$('button[title*="LGPD"]') ||
                      await page.$$('*[title*="LGPD"]');
    
    console.log(`üìã Encontrados ${botoesPDF.length} bot√µes PDF`);
    console.log(`üîí Encontrados ${botoesLGPD.length} bot√µes LGPD`);
    
    // 7. Fazer screenshot para verifica√ß√£o visual
    console.log('7Ô∏è‚É£ Capturando screenshot...');
    await page.screenshot({ 
      path: 'teste-exportacao-screenshot.png', 
      fullPage: true 
    });
    console.log('üì∏ Screenshot salvo como teste-exportacao-screenshot.png');
    
    // 8. Tentar clicar em um bot√£o se encontrado
    if (botoesPDF.length > 0) {
      console.log('8Ô∏è‚É£ Testando bot√£o PDF...');
      try {
        await botoesPDF[0].click();
        console.log('‚úÖ Clicou no bot√£o PDF');
        await page.waitForTimeout(2000);
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao clicar no bot√£o PDF:', error.message);
      }
    }
    
    if (botoesLGPD.length > 0) {
      console.log('9Ô∏è‚É£ Testando bot√£o LGPD...');
      try {
        await botoesLGPD[0].click();
        console.log('‚úÖ Clicou no bot√£o LGPD');
        await page.waitForTimeout(2000);
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao clicar no bot√£o LGPD:', error.message);
      }
    }
    
    console.log('\nüéâ Teste automatizado conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    await page.screenshot({ path: 'erro-teste-screenshot.png' });
    console.log('üì∏ Screenshot do erro salvo como erro-teste-screenshot.png');
  } finally {
    await browser.close();
  }
}

// Verificar se puppeteer est√° dispon√≠vel
if (require.resolve('puppeteer')) {
  testarBotoesExportacao();
} else {
  console.log('üìù Teste manual recomendado:');
  console.log('1. Acesse http://localhost:8081');
  console.log('2. Fa√ßa login com: dr.teste.agendamento@teste.com / 123456');
  console.log('3. Navegue para "Prontu√°rios"');
  console.log('4. Teste os bot√µes "PDF" e "LGPD" em qualquer prontu√°rio');
  console.log('5. Verifique se os PDFs s√£o gerados com diferentes conte√∫dos');
}

/**
 * Script de teste completo do sistema SGH
 * Testa todas as funcionalidades das novas prescri√ß√µes
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

let authToken = '';

// Fun√ß√£o para fazer login
async function login() {
  try {
    console.log('üîê Fazendo login...');
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'admin@sgh.com',
      password: '123456'
    });
    
    authToken = response.data.access_token;
    console.log('‚úÖ Login realizado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro no login:', error.response?.data || error.message);
    return false;
  }
}

// Fun√ß√£o para buscar pacientes
async function buscarPacientes() {
  try {
    const response = await axios.get(`${API_BASE_URL}/pacientes`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚úÖ Pacientes encontrados:', response.data.length);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar pacientes:', error.response?.data || error.message);
    return [];
  }
}

// Fun√ß√£o para buscar m√©dicos
async function buscarMedicos() {
  try {
    const response = await axios.get(`${API_BASE_URL}/auth/medicos`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚úÖ M√©dicos encontrados:', response.data.length);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar m√©dicos:', error.response?.data || error.message);
    return [];
  }
}

// Fun√ß√£o para criar prontu√°rio de teste
async function criarProntuarioTeste(paciente, medico) {
  try {
    console.log('\nüìù Criando prontu√°rio de teste...');
    
    const novoProntuario = {
      pacienteId: paciente.id,
      medicoId: medico.id,
      dataConsulta: new Date().toISOString(),
      anamnese: 'Paciente relata dor de cabe√ßa h√° 3 dias, sem febre.',
      exameFisico: 'PA: 120/80 mmHg, FC: 72 bpm, ausculta cardiopulmonar normal.',
      diagnostico: 'Cefaleia tensional',
      prescricao: 'Orienta√ß√µes gerais para descanso e hidrata√ß√£o (uso hospitalar)',
      prescricaoUsoInterno: 'Dipirona 500mg - 1 comprimido de 6/6h por 3 dias (tomar em casa)',
      prescricaoUsoExterno: 'Paracetamol 750mg - 1 comprimido de 8/8h se dor (comprar na farm√°cia)',
      observacoes: 'Retornar se sintomas persistirem por mais de 3 dias'
    };

    const response = await axios.post(`${API_BASE_URL}/prontuarios`, novoProntuario, {
      headers: { Authorization: `Bearer ${authToken}` }
    });

    console.log('‚úÖ Prontu√°rio criado com sucesso! ID:', response.data.id);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao criar prontu√°rio:', error.response?.data || error.message);
    return null;
  }
}

// Fun√ß√£o para buscar prontu√°rios
async function buscarProntuarios() {
  try {
    const response = await axios.get(`${API_BASE_URL}/prontuarios/with-relations`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚úÖ Prontu√°rios encontrados:', response.data.length);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar prontu√°rios:', error.response?.data || error.message);
    return [];
  }
}

// Fun√ß√£o para testar valida√ß√µes das prescri√ß√µes
async function testarValidacoesPrescricoes() {
  console.log('\nüß™ Testando valida√ß√µes das prescri√ß√µes...');
  
  const pacientes = await buscarPacientes();
  const medicos = await buscarMedicos();
  
  if (pacientes.length === 0) {
    console.log('‚ö†Ô∏è Nenhum paciente encontrado para teste');
    return;
  }
  
  if (medicos.length === 0) {
    console.log('‚ö†Ô∏è Nenhum m√©dico encontrado para teste');
    return;
  }

  console.log('\nüìã Teste 1: Prontu√°rio SEM prescri√ß√µes obrigat√≥rias (deve falhar)');
  try {
    const prontuarioInvalido = {
      pacienteId: pacientes[0].id,
      medicoId: medicos[0].id,
      dataConsulta: new Date().toISOString(),
      anamnese: 'Teste',
      exameFisico: 'Teste',
      diagnostico: 'Teste',
      prescricao: 'Apenas orienta√ß√µes gerais',
      // Sem prescricaoUsoInterno e prescricaoUsoExterno
      observacoes: 'Teste'
    };

    await axios.post(`${API_BASE_URL}/prontuarios`, prontuarioInvalido, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚ùå ERRO: Prontu√°rio inv√°lido foi aceito!');
  } catch (error) {
    console.log('‚úÖ Valida√ß√£o funcionando: Prontu√°rio rejeitado como esperado');
    console.log('   Erro:', error.response?.data?.message || 'Validation failed');
  }

  console.log('\nüìã Teste 2: Prontu√°rio COM prescri√ß√µes obrigat√≥rias (deve funcionar)');
  const prontuarioValido = await criarProntuarioTeste(pacientes[0], medicos[0]);
  
  if (prontuarioValido) {
    console.log('‚úÖ Prontu√°rio v√°lido criado com sucesso!');
    
    // Verificar se os campos est√£o corretos
    console.log('\nüîç Verificando campos do prontu√°rio:');
    console.log('   - Prescri√ß√£o geral (opcional):', prontuarioValido.prescricao ? '‚úÖ Presente' : '‚ö†Ô∏è Ausente');
    console.log('   - Prescri√ß√£o uso interno (obrigat√≥ria):', prontuarioValido.prescricaoUsoInterno ? '‚úÖ Presente' : '‚ùå Ausente');
    console.log('   - Prescri√ß√£o uso externo (obrigat√≥ria):', prontuarioValido.prescricaoUsoExterno ? '‚úÖ Presente' : '‚ùå Ausente');
  }
}

// Fun√ß√£o para simular teste de receita digital
async function simularTesteReceitaDigital() {
  console.log('\nüíä Simulando teste de receita digital...');
  
  const prontuarios = await buscarProntuarios();
  
  if (prontuarios.length === 0) {
    console.log('‚ö†Ô∏è Nenhum prontu√°rio encontrado para testar receita');
    return;
  }

  const prontuario = prontuarios[0];
  
  console.log('üìã Verificando se prontu√°rio pode gerar receita digital:');
  
  const temPrescricaoInterno = prontuario.prescricaoUsoInterno && prontuario.prescricaoUsoInterno.trim() !== '';
  const temPrescricaoExterno = prontuario.prescricaoUsoExterno && prontuario.prescricaoUsoExterno.trim() !== '';
  
  console.log('   - Prescri√ß√£o uso interno:', temPrescricaoInterno ? '‚úÖ Presente' : '‚ùå Ausente');
  console.log('   - Prescri√ß√£o uso externo:', temPrescricaoExterno ? '‚úÖ Presente' : '‚ùå Ausente');
  
  if (temPrescricaoInterno || temPrescricaoExterno) {
    console.log('‚úÖ Receita digital PODE ser gerada');
    console.log('üìÑ Conte√∫do da receita seria:');
    if (temPrescricaoInterno) {
      console.log('   üè† Uso Interno:', prontuario.prescricaoUsoInterno);
    }
    if (temPrescricaoExterno) {
      console.log('   üè™ Uso Externo:', prontuario.prescricaoUsoExterno);
    }
  } else {
    console.log('‚ùå Receita digital N√ÉO pode ser gerada (sem prescri√ß√µes obrigat√≥rias)');
  }
}

// Fun√ß√£o principal
async function executarTestes() {
  console.log('üöÄ Iniciando testes completos do Sistema SGH');
  console.log('=' .repeat(50));
  
  // Fazer login
  if (!await login()) {
    console.log('‚ùå N√£o foi poss√≠vel fazer login. Encerrando testes.');
    return;
  }

  // Testar valida√ß√µes das prescri√ß√µes
  await testarValidacoesPrescricoes();
  
  // Simular teste de receita digital
  await simularTesteReceitaDigital();
  
  console.log('\n' + '=' .repeat(50));
  console.log('üéâ Testes conclu√≠dos!');
  console.log('\nüìã Resumo das funcionalidades testadas:');
  console.log('   ‚úÖ Login no sistema');
  console.log('   ‚úÖ Busca de pacientes e m√©dicos');
  console.log('   ‚úÖ Valida√ß√£o de prescri√ß√µes obrigat√≥rias');
  console.log('   ‚úÖ Cria√ß√£o de prontu√°rio v√°lido');
  console.log('   ‚úÖ Verifica√ß√£o de receita digital');
  console.log('\nüí° Pr√≥ximos passos:');
  console.log('   1. Acesse o frontend em: http://localhost:5173');
  console.log('   2. Teste a cria√ß√£o de prontu√°rios pela interface');
  console.log('   3. Teste a gera√ß√£o de receitas digitais');
  console.log('   4. Verifique os campos obrigat√≥rios no formul√°rio');
}

// Executar testes
executarTestes().catch(console.error);

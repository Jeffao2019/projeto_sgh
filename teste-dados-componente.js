/**
 * FUN√á√ÉO SUPER SIMPLES PARA TESTAR OS DADOS NO COMPONENTE
 * Adicione esta fun√ß√£o no console para testar os dados que est√£o chegando
 */

// Fun√ß√£o para inspecionar os dados que est√£o sendo usados no componente React
window.inspecionarDadosProntuarios = () => {
  console.log("üîç INSPECIONANDO DADOS DOS PRONTU√ÅRIOS...");
  
  // Tentar encontrar os dados no React
  const componenteReact = document.querySelector('[data-react-component]') || document.querySelector('#root');
  
  if (componenteReact) {
    console.log("‚úÖ Componente React encontrado");
    
    // Verificar se h√° dados de prontu√°rios no estado do React
    const reactFiber = componenteReact._reactInternalFiber || componenteReact._reactInternalInstance;
    
    if (reactFiber) {
      console.log("‚úÖ React Fiber encontrado");
    }
  }
  
  // M√©todo alternativo: verificar o que est√° sendo renderizado
  const linhasProntuarios = document.querySelectorAll('[class*="grid"]:has(button)');
  console.log(`üìä Linhas de prontu√°rios encontradas: ${linhasProntuarios.length}`);
  
  linhasProntuarios.forEach((linha, index) => {
    console.log(`\nüìã Prontu√°rio ${index + 1}:`);
    
    // Buscar dados vis√≠veis na linha
    const textos = linha.textContent?.split(/\s+/).filter(t => t.length > 2) || [];
    console.log("   Textos vis√≠veis:", textos.slice(0, 10).join(' | '));
    
    // Buscar bot√µes de export
    const botoesExport = linha.querySelectorAll('button');
    console.log(`   Bot√µes encontrados: ${botoesExport.length}`);
    
    botoesExport.forEach((botao, btnIndex) => {
      const texto = botao.textContent?.trim() || botao.title || 'Sem texto';
      console.log(`   Bot√£o ${btnIndex + 1}: "${texto}"`);
      
      // Tentar extrair dados do onClick do bot√£o
      if (botao.onclick) {
        console.log(`   ‚úÖ Bot√£o ${btnIndex + 1} tem fun√ß√£o onClick`);
      } else {
        console.log(`   ‚ùå Bot√£o ${btnIndex + 1} SEM fun√ß√£o onClick`);
      }
    });
  });
  
  // Testar se conseguimos acessar o estado do React diretamente
  console.log("\nüîç Tentando acessar dados do React...");
  
  // M√©todo mais direto: capturar o que √© passado para os bot√µes
  const botoesPDF = document.querySelectorAll('button');
  botoesPDF.forEach((botao, index) => {
    if (botao.textContent?.includes('') || botao.title?.includes('PDF')) {
      console.log(`\nüéØ Bot√£o PDF ${index + 1}:`);
      
      // Tentar capturar o evento de clique para ver os dados
      const originalClick = botao.onclick;
      botao.onclick = function(event) {
        console.log("üéØ DADOS CAPTURADOS DO CLIQUE:");
        console.log("   Event:", event);
        console.log("   Arguments:", arguments);
        console.log("   This:", this);
        
        // Restaurar fun√ß√£o original e executar
        botao.onclick = originalClick;
        if (originalClick) {
          originalClick.call(this, event);
        }
      };
    }
  });
  
  console.log("\n‚úÖ Inspe√ß√£o conclu√≠da! Agora clique em um bot√£o de export para ver os dados.");
};

// Fun√ß√£o para testar dados espec√≠ficos
window.testarDadosEspecificos = () => {
  console.log("üß™ TESTE DE DADOS ESPEC√çFICOS");
  
  const token = localStorage.getItem('auth_token');
  if (!token) {
    console.log("‚ùå Token n√£o encontrado!");
    return;
  }
  
  fetch('http://localhost:3000/prontuarios/with-relations', {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  })
  .then(response => response.json())
  .then(prontuarios => {
    console.log(`üìä ${prontuarios.length} prontu√°rios encontrados`);
    
    prontuarios.forEach((p, index) => {
      console.log(`\nüìã Prontu√°rio ${index + 1}:`);
      console.log(`   ID: ${p.id}`);
      console.log(`   Paciente: ${p.paciente?.nome || '‚ùå AUSENTE'}`);
      console.log(`   CPF: ${p.paciente?.cpf || '‚ùå AUSENTE'}`);
      console.log(`   Email: ${p.paciente?.email || '‚ùå AUSENTE'}`);
      console.log(`   M√©dico: ${p.medico?.nome || '‚ùå AUSENTE'}`);
      console.log(`   CRM: ${p.medico?.crm || '‚ùå AUSENTE'}`);
      console.log(`   Diagn√≥stico: ${p.diagnostico || '‚ùå AUSENTE'}`);
      console.log(`   Data: ${p.dataConsulta || '‚ùå AUSENTE'}`);
    });
  })
  .catch(error => {
    console.error("‚ùå Erro:", error);
  });
};

console.log("üõ†Ô∏è FUN√á√ïES DE TESTE CRIADAS:");
console.log("1. inspecionarDadosProntuarios() - Inspeciona os dados no componente");
console.log("2. testarDadosEspecificos() - Testa dados direto da API");
console.log("Execute uma das fun√ß√µes para come√ßar o teste!");

/**
 * TESTE DOS DADOS DO PRONTU√ÅRIO
 * Execute no console para verificar se os dados est√£o completos
 */

console.log("üîç TESTANDO DADOS DOS PRONTU√ÅRIOS...");

// 1. Buscar token de autentica√ß√£o
const token = localStorage.getItem('auth_token');
console.log("üîë Token encontrado:", token ? "‚úÖ SIM" : "‚ùå N√ÉO");

if (!token) {
  console.log("‚ùå Erro: Fa√ßa login primeiro!");
} else {
  
  // 2. Testar endpoint de prontu√°rios com rela√ß√µes
  console.log("\nüì° Testando endpoint /prontuarios/with-relations...");
  
  fetch('http://localhost:3000/prontuarios/with-relations', {
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    console.log("üì° Status da resposta:", response.status);
    return response.json();
  })
  .then(prontuarios => {
    console.log(`üìä Total de prontu√°rios encontrados: ${prontuarios.length}`);
    
    if (prontuarios.length > 0) {
      const primeiro = prontuarios[0];
      console.log("\nüìã Estrutura do primeiro prontu√°rio:");
      console.log("   ID:", primeiro.id);
      console.log("   Data Consulta:", primeiro.dataConsulta);
      console.log("   Diagn√≥stico:", primeiro.diagnostico);
      console.log("   Paciente:", primeiro.paciente ? "‚úÖ PRESENTE" : "‚ùå AUSENTE");
      console.log("   M√©dico:", primeiro.medico ? "‚úÖ PRESENTE" : "‚ùå AUSENTE");
      
      if (primeiro.paciente) {
        console.log("\nüë§ Dados do Paciente:");
        console.log("   Nome:", primeiro.paciente.nome || "‚ùå AUSENTE");
        console.log("   CPF:", primeiro.paciente.cpf || "‚ùå AUSENTE");
        console.log("   Email:", primeiro.paciente.email || "‚ùå AUSENTE");
      }
      
      if (primeiro.medico) {
        console.log("\nüë®‚Äç‚öïÔ∏è Dados do M√©dico:");
        console.log("   Nome:", primeiro.medico.nome || "‚ùå AUSENTE");
        console.log("   CRM:", primeiro.medico.crm || "‚ùå AUSENTE");
        console.log("   Especialidade:", primeiro.medico.especialidade || "‚ùå AUSENTE");
      }
      
      console.log("\nüìù Dados completos do primeiro prontu√°rio:");
      console.log(JSON.stringify(primeiro, null, 2));
      
    } else {
      console.log("‚ùå Nenhum prontu√°rio encontrado!");
    }
  })
  .catch(error => {
    console.error("‚ùå Erro ao buscar prontu√°rios:", error);
  });
  
  // 3. Testar um prontu√°rio espec√≠fico (se houver)
  setTimeout(() => {
    console.log("\nüîç Testando prontu√°rio individual...");
    fetch('http://localhost:3000/prontuarios/with-relations', {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(prontuarios => {
      if (prontuarios.length > 0) {
        const primeiroId = prontuarios[0].id;
        console.log(`üìã Testando prontu√°rio ID: ${primeiroId}`);
        
        return fetch(`http://localhost:3000/prontuarios/${primeiroId}/with-relations`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
      }
    })
    .then(response => response ? response.json() : null)
    .then(prontuario => {
      if (prontuario) {
        console.log("üìã Dados do prontu√°rio individual:");
        console.log("   Paciente completo:", prontuario.paciente ? "‚úÖ" : "‚ùå");
        console.log("   M√©dico completo:", prontuario.medico ? "‚úÖ" : "‚ùå");
        console.log("   Dados:", JSON.stringify(prontuario, null, 2));
      }
    })
    .catch(error => {
      console.error("‚ùå Erro ao buscar prontu√°rio individual:", error);
    });
  }, 1000);
}

console.log("\n‚è≥ Aguarde os resultados dos testes...");

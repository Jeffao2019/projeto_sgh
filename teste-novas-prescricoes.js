/**
 * Script de teste para validar as novas regras de prescri√ß√µes:
 * - Prescri√ß√£o geral: OPCIONAL (apenas para uso hospitalar)
 * - Prescri√ß√£o de uso interno: OBRIGAT√ìRIA (ambiente domiciliar)
 * - Prescri√ß√£o de uso externo: OBRIGAT√ìRIA (ambiente externo)
 */

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

let authToken = '';

async function login() {
  try {
    console.log('üîê Fazendo login...');
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      email: 'admin@sgh.com',
      password: '123456'
    });
    
    authToken = response.data.access_token;
    console.log('‚úÖ Login realizado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro no login:', error.response?.data || error.message);
    console.error('üîç Detalhes do erro:', error.code || 'C√≥digo n√£o dispon√≠vel');
    return false;
  }
}

async function testarCriacaoProntuario() {
  try {
    console.log('\nüß™ Testando cria√ß√£o de prontu√°rio com novas regras...');
    
    // Buscar dados necess√°rios
    const [pacientesRes, medicosRes, agendamentosRes] = await Promise.all([
      axios.get(`${API_BASE_URL}/pacientes`, {
        headers: { Authorization: `Bearer ${authToken}` }
      }),
      axios.get(`${API_BASE_URL}/usuarios`, {
        headers: { Authorization: `Bearer ${authToken}` }
      }),
      axios.get(`${API_BASE_URL}/agendamentos`, {
        headers: { Authorization: `Bearer ${authToken}` }
      })
    ]);
    
    const paciente = pacientesRes.data[0];
    const medico = medicosRes.data.find(u => u.role === 'medico');
    const agendamento = agendamentosRes.data[0];
    
    if (!paciente || !medico || !agendamento) {
      console.log('‚ùå Dados b√°sicos n√£o encontrados para teste');
      return;
    }
    
    console.log(`üìã Usando paciente: ${paciente.nome}`);
    console.log(`üë®‚Äç‚öïÔ∏è Usando m√©dico: ${medico.nome}`);
    
    // Teste 1: Tentar criar prontu√°rio sem prescri√ß√µes obrigat√≥rias (deve falhar)
    console.log('\nüìù Teste 1: Criando prontu√°rio SEM prescri√ß√µes obrigat√≥rias (deve falhar)...');
    try {
      await axios.post(`${API_BASE_URL}/prontuarios`, {
        pacienteId: paciente.id,
        medicoId: medico.id,
        agendamentoId: agendamento.id,
        dataConsulta: new Date().toISOString(),
        anamnese: 'Teste anamnese',
        exameFisico: 'Teste exame f√≠sico',
        diagnostico: 'Teste diagn√≥stico',
        observacoes: 'Teste observa√ß√µes'
        // Sem prescri√ß√µes obrigat√≥rias
      }, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      
      console.log('‚ùå ERRO: Prontu√°rio foi criado sem prescri√ß√µes obrigat√≥rias!');
    } catch (error) {
      console.log('‚úÖ Correto: Prontu√°rio rejeitado por falta de prescri√ß√µes obrigat√≥rias');
      console.log(`   Mensagem: ${error.response?.data?.message || 'Validation failed'}`);
    }
    
    // Teste 2: Criar prontu√°rio com prescri√ß√µes obrigat√≥rias (deve funcionar)
    console.log('\nüìù Teste 2: Criando prontu√°rio COM prescri√ß√µes obrigat√≥rias...');
    try {
      const novoProntuario = await axios.post(`${API_BASE_URL}/prontuarios`, {
        pacienteId: paciente.id,
        medicoId: medico.id,
        agendamentoId: agendamento.id,
        dataConsulta: new Date().toISOString(),
        anamnese: 'Teste anamnese completa',
        exameFisico: 'Teste exame f√≠sico completo',
        diagnostico: 'Teste diagn√≥stico completo',
        prescricaoUsoInterno: 'Dipirona 500mg - 1 comprimido de 8/8h por 7 dias (uso domiciliar)',
        prescricaoUsoExterno: 'Ibuprofeno 600mg - 1 comprimido de 12/12h por 5 dias (farm√°cia)',
        observacoes: 'Teste observa√ß√µes'
        // Sem prescri√ß√£o geral (opcional)
      }, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      
      console.log('‚úÖ Prontu√°rio criado com sucesso!');
      console.log(`   ID: ${novoProntuario.data.id}`);
      
      // Teste 3: Criar prontu√°rio com todas as prescri√ß√µes (incluindo opcional)
      console.log('\nüìù Teste 3: Criando prontu√°rio com TODAS as prescri√ß√µes (incluindo opcional)...');
      const prontuarioCompleto = await axios.post(`${API_BASE_URL}/prontuarios`, {
        pacienteId: paciente.id,
        medicoId: medico.id,
        agendamentoId: agendamento.id,
        dataConsulta: new Date().toISOString(),
        anamnese: 'Teste anamnese completa 2',
        exameFisico: 'Teste exame f√≠sico completo 2',
        diagnostico: 'Teste diagn√≥stico completo 2',
        prescricao: 'Soro fisiol√≥gico 500ml EV (uso hospitalar apenas)', // Opcional
        prescricaoUsoInterno: 'Paracetamol 750mg - 1 comprimido de 6/6h por 3 dias (casa)',
        prescricaoUsoExterno: 'Omeprazol 20mg - 1 c√°psula em jejum por 14 dias (farm√°cia)',
        observacoes: 'Teste observa√ß√µes completas'
      }, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      
      console.log('‚úÖ Prontu√°rio completo criado com sucesso!');
      console.log(`   ID: ${prontuarioCompleto.data.id}`);
      
      return {
        simples: novoProntuario.data,
        completo: prontuarioCompleto.data
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao criar prontu√°rio:', error.response?.data || error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
  }
}

async function testarValidacoesFrontend() {
  console.log('\nüñ•Ô∏è  Testando valida√ß√µes do frontend...');
  console.log('üìù Valida√ß√µes implementadas:');
  console.log('   ‚úÖ Prescri√ß√£o Geral: Campo opcional (sem asterisco)');
  console.log('   ‚úÖ Prescri√ß√£o Uso Interno: Campo obrigat√≥rio (com asterisco e required)');
  console.log('   ‚úÖ Prescri√ß√£o Uso Externo: Campo obrigat√≥rio (com asterisco e required)');
  console.log('   ‚úÖ Placeholders atualizados com descri√ß√µes corretas');
  console.log('   ‚úÖ Receita digital mostra apenas prescri√ß√µes interna e externa');
}

async function executarTestes() {
  console.log('üöÄ Iniciando testes das novas regras de prescri√ß√µes...\n');
  
  const loginSuccess = await login();
  if (!loginSuccess) {
    console.log('‚ùå N√£o foi poss√≠vel fazer login. Encerrando testes.');
    return;
  }
  
  const prontuarios = await testarCriacaoProntuario();
  await testarValidacoesFrontend();
  
  console.log('\nüéâ Testes conclu√≠dos!');
  console.log('\nüìã Resumo das mudan√ßas implementadas:');
  console.log('   1. ‚úÖ Prescri√ß√£o geral agora √© OPCIONAL (apenas para uso hospitalar)');
  console.log('   2. ‚úÖ Prescri√ß√£o de uso interno √© OBRIGAT√ìRIA (ambiente domiciliar)');
  console.log('   3. ‚úÖ Prescri√ß√£o de uso externo √© OBRIGAT√ìRIA (ambiente externo)');
  console.log('   4. ‚úÖ Backend valida as regras corretamente');
  console.log('   5. ‚úÖ Frontend atualizado com campos obrigat√≥rios');
  console.log('   6. ‚úÖ Receita digital usa apenas prescri√ß√µes obrigat√≥rias');
  console.log('   7. ‚úÖ Tipos TypeScript atualizados');
  
  if (prontuarios) {
    console.log('\nüß™ Prontu√°rios de teste criados:');
    console.log(`   ‚Ä¢ Simples (s√≥ obrigat√≥rias): ${prontuarios.simples.id}`);
    console.log(`   ‚Ä¢ Completo (com opcional): ${prontuarios.completo.id}`);
  }
}

// Executar testes
executarTestes().catch(console.error);

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000';

// Lista de CRMs fict√≠cios para testes
const crmsFicticios = [
    'CRM-SP 123456',
    'CRM-RJ 234567', 
    'CRM-MG 345678',
    'CRM-SP 456789',
    'CRM-RS 567890',
    'CRM-PR 678901',
    'CRM-SC 789012',
    'CRM-SP 890123',
    'CRM-RJ 901234',
    'CRM-MG 012345',
    'CRM-BA 112233',
    'CRM-PE 223344',
    'CRM-CE 334455',
    'CRM-GO 445566',
    'CRM-DF 556677',
    'CRM-ES 667788',
    'CRM-MT 778899',
    'CRM-MS 889900',
    'CRM-RO 990011',
    'CRM-AC 101112'
];

// Especialidades m√©dicas realistas
const especialidades = [
    'Cl√≠nica Geral',
    'Cardiologia',
    'Dermatologia',
    'Endocrinologia',
    'Gastroenterologia',
    'Ginecologia e Obstetr√≠cia',
    'Neurologia',
    'Oftalmologia',
    'Ortopedia',
    'Otorrinolaringologia',
    'Pediatria',
    'Pneumologia',
    'Psiquiatria',
    'Radiologia',
    'Urologia'
];

// Fun√ß√£o para fazer login e obter token
async function obterToken() {
    try {
        console.log('üîê Fazendo login...');
        const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, {
            email: 'admin@admin.com',
            password: 'Admin123!'
        });
        
        console.log('‚úÖ Login realizado com sucesso!');
        return loginResponse.data.access_token;
    } catch (error) {
        console.error('‚ùå Erro ao fazer login:', error.response?.data || error.message);
        console.log('üí° Certifique-se de que o backend est√° rodando e que existe um usu√°rio admin.');
        throw error;
    }
}

async function buscarMedicos(token) {
    try {
        console.log('üîç Buscando m√©dicos...');
        const response = await axios.get(`${API_BASE_URL}/auth/medicos`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        return response.data;
    } catch (error) {
        console.error('‚ùå Erro ao buscar m√©dicos:', error.response?.data || error.message);
        return [];
    }
}

// Como n√£o existe endpoint de update para m√©dicos, vamos verificar se podemos atualizar via auth
async function verificarEndpointsDisponiveis(token) {
    console.log('üîç Verificando endpoints dispon√≠veis...');
    
    // Testar se existe endpoint de update para usu√°rios/m√©dicos
    try {
        const response = await axios.get(`${API_BASE_URL}/auth/profile`, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        });
        console.log('‚úÖ Endpoint /auth/profile funcionando');
    } catch (error) {
        console.log('‚ùå Endpoint /auth/profile n√£o dispon√≠vel');
    }
}

function gerarCRMFicticio(index) {
    return crmsFicticios[index % crmsFicticios.length];
}

function gerarEspecialidadeAleatoria() {
    return especialidades[Math.floor(Math.random() * especialidades.length)];
}

async function mostrarMedicosSemCRM() {
    console.log('üè• ========== VERIFICANDO CRMs DOS M√âDICOS ==========');
    console.log('');

    try {
        const token = await obterToken();
        const medicos = await buscarMedicos(token);
        
        if (medicos.length === 0) {
            console.log('‚ùå Nenhum m√©dico encontrado ou erro na busca.');
            return;
        }

        console.log(`üìä Total de m√©dicos encontrados: ${medicos.length}`);
        console.log('');

        let medicosComCRM = 0;
        let medicosSemCRM = 0;
        const medicosSemCRMList = [];

        for (let i = 0; i < medicos.length; i++) {
            const medico = medicos[i];
            
            console.log(`üë®‚Äç‚öïÔ∏è M√©dico ${i + 1}: ${medico.nome}`);
            console.log(`   ID: ${medico.id}`);
            console.log(`   Email: ${medico.email}`);
            console.log(`   Papel: ${medico.papel}`);

            // Verificar se tem campos CRM e especialidade (podem n√£o existir na estrutura atual)
            if (medico.crm && medico.crm.trim() !== '') {
                console.log(`   ‚úÖ CRM: ${medico.crm}`);
                medicosComCRM++;
            } else {
                console.log(`   ‚ùå CRM: VAZIO`);
                medicosSemCRM++;
                medicosSemCRMList.push({
                    id: medico.id,
                    nome: medico.nome,
                    email: medico.email,
                    crmSugerido: gerarCRMFicticio(i),
                    especialidadeSugerida: gerarEspecialidadeAleatoria()
                });
            }

            if (medico.especialidade && medico.especialidade.trim() !== '') {
                console.log(`   ‚úÖ Especialidade: ${medico.especialidade}`);
            } else {
                console.log(`   ‚ùå Especialidade: VAZIA`);
            }
            
            console.log('');
        }

        console.log('üìà ========== RESUMO ==========');
        console.log(`‚úÖ M√©dicos com CRM: ${medicosComCRM}`);
        console.log(`‚ùå M√©dicos sem CRM: ${medicosSemCRM}`);
        console.log(`üìä Total de m√©dicos: ${medicos.length}`);
        console.log('');

        if (medicosSemCRM > 0) {
            console.log('üéØ ========== M√âDICOS QUE PRECISAM DE CRM ==========');
            medicosSemCRMList.forEach((medico, index) => {
                console.log(`${index + 1}. ${medico.nome}`);
                console.log(`   ID: ${medico.id}`);
                console.log(`   Email: ${medico.email}`);
                console.log(`   CRM sugerido: ${medico.crmSugerido}`);
                console.log(`   Especialidade sugerida: ${medico.especialidadeSugerida}`);
                console.log('');
            });

            console.log('üí° PR√ìXIMOS PASSOS:');
            console.log('1. Verificar se a entidade User tem campos para CRM e especialidade');
            console.log('2. Se n√£o tiver, adicionar os campos na migration');
            console.log('3. Criar endpoint para atualizar dados do m√©dico');
            console.log('4. Executar script de atualiza√ß√£o');
        } else {
            console.log('üéâ Todos os m√©dicos j√° possuem CRM!');
        }

        await verificarEndpointsDisponiveis(token);

    } catch (error) {
        console.error('üí• Erro na execu√ß√£o:', error.message);
    }
}

// Executar o script
mostrarMedicosSemCRM().catch(error => {
    console.error('üí• Erro fatal na execu√ß√£o:', error);
    process.exit(1);
});
